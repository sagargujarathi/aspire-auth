-- Enum-like constraints for Gender and Role Type
CREATE TYPE GENDER_TYPE AS ENUM('MALE', 'FEMALE');

CREATE TYPE ROLE_TYPE AS ENUM('USER', 'ADMIN');

-- Accounts Table
CREATE TABLE IF NOT EXISTS ACCOUNTS (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    
    username TEXT UNIQUE NOT NULL,
    email TEXT UNIQUE NOT NULL,
    hashed_password TEXT NOT NULL,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    date_of_birth DATE,
    gender GENDER_TYPE,
    role_type ROLE_TYPE DEFAULT 'USER',
    is_verified BOOLEAN DEFAULT FALSE,
    avatar TEXT,

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Services Table
CREATE TABLE IF NOT EXISTS SERVICES (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    
    owner_id UUID REFERENCES ACCOUNTS(id) ON DELETE CASCADE,
    service_name TEXT UNIQUE NOT NULL,
    service_logo TEXT,
    secret_key TEXT NOT NULL, -- Added column for storing encrypted service secret
    service_description TEXT,

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Service Users Table (Tracks which users are using which services)
CREATE TABLE IF NOT EXISTS SERVICES_USERS (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    
    service_id UUID REFERENCES SERVICES(id) ON DELETE CASCADE,
    user_id UUID REFERENCES ACCOUNTS(id) ON DELETE CASCADE,
    is_verified BOOLEAN DEFAULT FALSE,

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Refresh Tokens Table
CREATE TABLE IF NOT EXISTS REFRESH_TOKENS (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    
    user_id UUID REFERENCES ACCOUNTS(id) ON DELETE CASCADE,
    service_id UUID REFERENCES SERVICES(id) ON DELETE CASCADE,
    refresh_token TEXT UNIQUE NOT NULL,
    expires_at TIMESTAMP NOT NULL DEFAULT (NOW() + INTERVAL '7 days'),

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to delete expired refresh tokens
CREATE OR REPLACE FUNCTION delete_expired_tokens()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM REFRESH_TOKENS WHERE expires_at <= NOW();
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Triggers to update updated_at timestamp on all tables
CREATE TRIGGER ACCOUNTS_UPDATE_TRIGGER
BEFORE UPDATE ON ACCOUNTS
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER SERVICES_UPDATE_TRIGGER
BEFORE UPDATE ON SERVICES
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER SERVICES_USERS_UPDATE_TRIGGER
BEFORE UPDATE ON SERVICES_USERS
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER REFRESH_TOKENS_UPDATE_TRIGGER
BEFORE UPDATE ON REFRESH_TOKENS
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

-- Trigger to delete expired refresh tokens automatically
CREATE TRIGGER DELETE_EXPIRED_TOKENS_TRIGGER
AFTER INSERT OR UPDATE ON REFRESH_TOKENS
EXECUTE FUNCTION delete_expired_tokens();
